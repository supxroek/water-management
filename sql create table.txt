-- ตาราง Zones
CREATE TABLE Zones (
    zone_id SERIAL PRIMARY KEY,  -- รหัสโซน (PK)
    zone_name VARCHAR(50) NOT NULL,  -- ชื่อโซน
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่สร้างข้อมูล
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- วันที่แก้ไขข้อมูล
);

-- ตาราง Users
CREATE TABLE Users (
    user_id SERIAL PRIMARY KEY,  -- รหัสผู้ใช้งาน (PK)
    full_name VARCHAR(255) NOT NULL,  -- ชื่อ-นามสกุล
    house_number VARCHAR(10) NOT NULL,  -- บ้านเลขที่
    id_card_number CHAR(13) UNIQUE NOT NULL CHECK (LENGTH(id_card_number) = 13),  -- เลขบัตรประชาชน 13 หลัก
    password VARCHAR(255) NOT NULL,  -- รหัสผ่าน
    phone_number VARCHAR(15) CHECK (phone_number ~ '^[0-9]+$'),  -- เบอร์โทรศัพท์ (ตัวเลขเท่านั้น)
    zone_id INTEGER NOT NULL,  -- รหัสโซน (FK)
    role VARCHAR(50) DEFAULT 'user' NOT NULL,  -- บทบาทของผู้ใช้งาน (user, admin)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่สร้างข้อมูล
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่แก้ไขข้อมูล
    FOREIGN KEY (zone_id) REFERENCES Zones(zone_id) ON DELETE CASCADE  -- ความสัมพันธ์กับตาราง Zones (FK)
);

-- ตาราง WaterUsage
CREATE TABLE WaterUsage (
    usage_id SERIAL PRIMARY KEY,  -- รหัสการใช้น้ำ (PK)
    zone_id INTEGER NOT NULL,  -- รหัสโซน (FK)
    unit_price NUMERIC(10, 2) NOT NULL CHECK (unit_price > 0),  -- ราคาต่อหน่วย (บาท)
    service_fee NUMERIC(10, 2) NOT NULL CHECK (service_fee >= 0),  -- ค่าบริการ (บาท)
    status VARCHAR(50) DEFAULT 'unpaid' NOT NULL,  -- สถานะการชำระเงิน (unpaid, paid)
    notes TEXT,  -- หมายเหตุ
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่สร้างข้อมูล
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่แก้ไขข้อมูล
    FOREIGN KEY (zone_id) REFERENCES Zones(zone_id) ON DELETE CASCADE  -- ความสัมพันธ์กับตาราง Zones (FK)
);

-- ตาราง WaterUsageDetails
CREATE TABLE WaterUsageDetails (
    detail_id SERIAL PRIMARY KEY,  -- รหัสรายละเอียดการใช้น้ำ (PK)
    usage_id INTEGER NOT NULL,  -- รหัสการใช้น้ำ (FK)
    reading_date DATE NOT NULL,  -- วันที่บันทึกค่ามิเตอร์
    previous_reading NUMERIC NOT NULL CHECK (previous_reading >= 0),  -- ค่ามิเตอร์ก่อนหน้า (หน่วย)
    current_reading NUMERIC NOT NULL CHECK (current_reading >= 0),  -- ค่ามิเตอร์ปัจจุบัน (หน่วย)
    total_units NUMERIC NOT NULL,  -- จำนวนหน่วยน้ำที่ใช้งาน (หน่วย)
    total_payment NUMERIC(10, 2) NOT NULL,  -- จำนวนเงินที่ต้องชำระ (บาท)
    outstanding_balance NUMERIC(10, 2) DEFAULT 0 CHECK (outstanding_balance >= 0),  -- ยอดค้างชำระ (บาท)
    penalty_fee NUMERIC(10, 2) DEFAULT 0 CHECK (penalty_fee >= 0),  -- ค่าปรับ (บาท)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่สร้างข้อมูล
    FOREIGN KEY (usage_id) REFERENCES WaterUsage(usage_id) ON DELETE CASCADE  -- ความสัมพันธ์กับตาราง WaterUsage (FK)
);

-- ตาราง WaterUsageChanges
CREATE TABLE WaterUsageChanges (
    change_id SERIAL PRIMARY KEY,  -- รหัสการเปลี่ยนแปลงการใช้น้ำ (PK)
    detail_id INTEGER NOT NULL,  -- รหัสรายละเอียดการใช้น้ำ (FK)
    change_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่เปลี่ยนแปลง
    previous_reading NUMERIC NOT NULL CHECK (previous_reading >= 0),  -- ค่ามิเตอร์ก่อนหน้า (หน่วย)
    current_reading NUMERIC NOT NULL CHECK (current_reading >= 0),  -- ค่ามิเตอร์ปัจจุบัน (หน่วย)
    total_units NUMERIC NOT NULL,  -- จำนวนหน่วยน้ำที่ใช้งาน (หน่วย)
    total_payment NUMERIC(10, 2) NOT NULL,  -- จำนวนเงินที่ต้องชำระ (บาท)
    outstanding_balance NUMERIC(10, 2) DEFAULT 0 CHECK (outstanding_balance >= 0),  -- ยอดค้างชำระ (บาท)
    notes TEXT,  -- หมายเหตุ
    FOREIGN KEY (detail_id) REFERENCES WaterUsageDetails(detail_id) ON DELETE CASCADE  -- ความสัมพันธ์กับตาราง WaterUsageDetails (FK)
);

-- ตาราง Admins
CREATE TABLE Admins (
    admin_id SERIAL PRIMARY KEY,  -- รหัสผู้ดูแลระบบ (PK)
    username VARCHAR(50) UNIQUE NOT NULL,  -- ชื่อผู้ใช้งาน
    password VARCHAR(255) NOT NULL,  -- รหัสผ่าน
    full_name VARCHAR(255),  -- ชื่อ-นามสกุล
    role VARCHAR(50) DEFAULT 'admin' CHECK (role IN ('admin', 'superadmin')),  -- บทบาทของผู้ดูแลระบบ (admin, superadmin)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- วันที่สร้างข้อมูล
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- วันที่แก้ไขข้อมูล
);

-- ตาราง UserLogs
CREATE TABLE UserLogs (
    log_id SERIAL PRIMARY KEY,  -- รหัสบันทึกข้อมูลผู้ใช้งาน (PK)
    userLog_id INTEGER NOT NULL,  -- รหัสผู้ใช้งาน (FK) ทั้ง Users และ Admins
    action VARCHAR(255),  -- การกระทำ
    action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- เวลาที่กระทำ
);

-- Trigger สำหรับการคำนวณค่าใช้จ่ายน้ำใน WaterUsageDetails
CREATE OR REPLACE FUNCTION calculate_water_usage() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.current_reading < NEW.previous_reading THEN
        RAISE EXCEPTION 'current_reading must be greater than or equal to previous_reading';
    END IF;

    NEW.total_units := NEW.current_reading - NEW.previous_reading;
    NEW.total_payment := (NEW.total_units * NEW.unit_price) + NEW.service_fee + NEW.penalty_fee;

    IF NEW.outstanding_balance > 0 THEN
        NEW.total_payment := NEW.total_payment + NEW.outstanding_balance;
    END IF;

    NEW.status := CASE WHEN NEW.total_payment > 0 THEN 'unpaid' ELSE 'paid' END;
    NEW.updated_at := CURRENT_TIMESTAMP;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_calculate_water_usage
BEFORE INSERT OR UPDATE ON WaterUsageDetails
FOR EACH ROW
EXECUTE FUNCTION calculate_water_usage();

-- Trigger สำหรับการอัปเดตค่า updated_at ของ Users
CREATE OR REPLACE FUNCTION update_timestamp_users() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_users
BEFORE UPDATE ON Users
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_users();

-- Trigger สำหรับการอัปเดตค่า updated_at ของ Zones
CREATE OR REPLACE FUNCTION update_timestamp_zones() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_zones
BEFORE UPDATE ON Zones
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_zones();

-- Trigger สำหรับการอัปเดตค่า updated_at ของ WaterUsage
CREATE OR REPLACE FUNCTION update_timestamp_waterusage() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_waterusage
BEFORE UPDATE ON WaterUsage
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_waterusage();

-- Trigger สำหรับการอัปเดตค่า updated_at ของ Admins
CREATE OR REPLACE FUNCTION update_timestamp_admins() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_admins
BEFORE UPDATE ON Admins
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_admins();
